#############################
#Brad Wubbenhorst
#bwubb@pennmedicine.upenn.edu
#Dec. 2018

#This code is used to run Mutect 2 paired somatic variant calling.
#It requires snakemake and GATK v4 (or greater?)

#Tab separated file. Tumor Normal pairs
with open(config.get('project',{}).get('pair_list','pairs.list'),'r') as p:
    PAIRS=dict(line.split('\t') for line in p.read().splitlines())

#You can provide a tab-separated file: sample,path_to_bam
with open(config['project']['bam_list'],'r') as b:
    BAMS=dict(line.split('\t') for line in b.read().splitlines())

def paired_bams(wildcards):
    ref=config['resources']['reference']['key']
    tumor=wildcards.tumor
    normal=PAIRS[wildcards.tumor]
    if config['project'].get('bam_list',False):
        return {'tumor':BAMS[wildcards.tumor],'normal':BAMS[normal]}
    else:
        return {'tumor':'bam_input/final/{tumor}/{ref}/{tumor}.ready.bam'.format(tumor=tumor,ref=ref),'normal':'bam_input/final/{normal}/{ref}/{normal}.ready.bam'.format(normal=normal,ref=ref)}

rule all:
    input:
        expand("data/work/{tumor}/{targets}/mutect/somatic.twice_filtered.vcf.gz",tumor=PAIRS.keys(),targets=config['resources']['library']['targets_key'])

rule raw_calls:
    input:
        expand("data/work/{tumor}/{targets}/mutect/somatic.raw.vcf.gz",tumor=PAIRS.keys(),targets=config['resources']['library']['targets_key'])

rule MuTect2:
    input:
        unpack(paired_bams)
    output:#--bamOutput {output.bam}
        raw="data/work/{tumor}/{targets}/mutect/somatic.raw.vcf.gz",
        snps="data/work/{tumor}/{targets}/mutect/somatic.snps.vcf.gz",
        indels="data/work/{tumor}/{targets}/mutect/somatic.indels.vcf.gz"
    params:
        ref=config['resources']['reference']['fasta'],
        intervals=config['resources']['library']['targets_intervals'],
        memory='16g',
        tumor=lambda wildcards: true_name(wildcards.tumor),
        normal=lambda wildcards: true_name(PAIRS[wildcards.tumor])
    shell:
        """
        gatk --java-options '-Xmx{params.memory}' Mutect2 -R {params.ref} -I {input.tumor} -I {input.normal} -tumor {params.tumor} -normal {params.normal} -L {params.intervals} -O {output.raw}
        gatk --java-options '-Xmx{params.memory}' SelectVariants -R {params.ref} -V {output.raw} -O {output.snps} -L {params.intervals} -select-type SNP
        gatk --java-options '-Xmx{params.memory}' SelectVariants -R {params.ref} -V {output.raw} -O {output.indels} -L {params.intervals} -select-type INDEL
        """

rule CalculateContamination:
#If GRCh38 consider adding --disable-read-filter MateOnSameContigOrNoMappedMateReadFilter, see documentation for details
    input:
        unpack(paired_bams)
    output:
        pileup="data/work/{tumor}/{targets}/mutect/getpileupsummaries.table",
        contamination="data/work/{tumor}/{targets}/mutect/calculatecontamination.table"
    params:
        allele=config['resources']['library']['gnomad_vcf'],
        intervals=config['resources']['library']['targets_intervals']
    shell:
        """
        gatk GetPileupSummaries -I {input.tumor} -V {params.allele} -L {params.intervals} -O {output.pileup}
        gatk CalculateContamination -I {output.pileup} -O {output.contamination}
        """

rule FilterMutectCall:
    input:
        vcf="data/work/{tumor}/{targets}/mutect/somatic.raw.vcf.gz",
        contamination="data/work/{tumor}/{targets}/mutect/calculatecontamination.table"
    output:
        "data/work/{tumor}/{targets}/mutect/somatic.once_filtered.vcf.gz"
    shell:
        "gatk FilterMutectCalls -V {input.vcf} --contamination-table {input.contamination} -O {output}"

rule CollectSequencingArtifactMetrics:
    input:
        unpack(paired_bams)
    output:
        "data/work/{tumor}/{targets}/mutect/tumor_artifact.pre_adapter_detail_metrics.txt"
    params:
        ref=config['resources']['reference']['fasta'],
        output_p="data/work/{tumor}/{targets}/mutect/tumor_artifact"
    shell:
        'gatk CollectSequencingArtifactMetrics -R {params.ref} -I {input.tumor} -O {params.output_p} --FILE_EXTENSION ".txt"'

rule FilterOrientationBias:
    input:
        vcf="data/work/{tumor}/{targets}/mutect/somatic.once_filtered.vcf.gz",
        metrics="data/work/{tumor}/{targets}/mutect/tumor_artifact.pre_adapter_detail_metrics.txt"
    output:
        "data/work/{tumor}/{targets}/mutect/somatic.twice_filtered.vcf.gz"
    shell:
        "gatk FilterByOrientationBias -AM G/T -AM C/T -V {input.vcf} -P {input.metrics} -O {output}"